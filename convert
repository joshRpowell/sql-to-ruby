#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'gda'
end

module Converter
  module Conversions
    refine GDA::Nodes::Expr do
      def convert
        if func
          func.convert
        elsif cond
          cond.convert
        elsif value
          value
        else
          raise 'Unsupported expression type'
        end
      end
    end

    refine GDA::Nodes::From do
      def convert
        targets[0].convert
      end

      def simple?
        targets.length == 1 && targets[0].simple?
      end
    end

    refine GDA::Nodes::Function do
      def convert
        "#{function_name}(#{args_list.map(&:convert).join(', ')})"
      end
    end

    refine GDA::Nodes::Operation do
      def convert
        raise 'Cannot yet understand operators besides =' unless operator == '='

        left, right = operands.map(&:convert)
        "#{left}: \"#{right}\""
      end
    end

    refine GDA::Nodes::Order do
      def convert(source)
        if asc
          ":#{expr.convert}"
        else
          "#{source}.arel_table[#{expr.convert.to_sym.inspect}].desc"
        end
      end
    end

    refine GDA::Nodes::Select do
      def convert
        ruby = source

        if expr_list.length > 1 || expr_list[0].expr.value != '*'
          ruby = "#{ruby}.select(#{expr_list.map { |node| node.convert(source) }.join(', ')})"
        elsif !where_cond && !limit_count && !limit_offset
          ruby = "#{ruby}.all"
        end

        ruby = "#{ruby}.where(#{where_cond.convert})" if where_cond

        if order_by.length > 0
          ruby = "#{ruby}.order(#{order_by.map { |node| node.convert(source) }.join(', ')})"
        end

        ruby = "#{ruby}.limit(#{limit_count.convert})" if limit_count
        ruby = "#{ruby}.offset(#{limit_offset.convert})" if limit_offset

        ruby
      end

      def source
        raise 'Cannot yet understand multiple table queries' unless from.simple?
        from.convert[0...-1].capitalize
      end
    end

    refine GDA::Nodes::SelectField do
      def convert(source)
        if expr
          field = "Arel.sql(\"#{expr.convert}\")".dup
          field << ".as(\"#{as}\")" if as
          return field
        end

        symbol = field_name.to_sym.inspect
        return symbol unless as

        "#{source}.arel_table[#{symbol}].as(#{as})"
      end
    end

    refine GDA::Nodes::Target do
      def convert
        table_name
      end

      def simple?
        !as
      end
    end
  end

  using Conversions

  def self.convert(sql)
    GDA::SQL::Parser.new.parse(sql).ast.convert
  end
end

puts Converter.convert(ARGV.first)
